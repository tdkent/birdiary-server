generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  user_id String @db.Uuid @unique @default(uuid())
  email String @unique @db.VarChar(255)
  password String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  profile Profile?
  fav_bird Favorite?
  sightings Sighting[]
}

model Profile {
  id Int @id @default(autoincrement())
  name String? @db.VarChar(60)
  location String? @db.VarChar(120)
  user_id String @db.Uuid @unique
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Favorite {
  id Int @id @default(autoincrement())
  user_id String @db.Uuid @unique
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  bird_id Int?
  bird Bird? @relation(fields:[bird_id], references: [id])
}

enum Rarity {
  Common
  Uncommon
  Rare
}
model Bird {
  id Int @id @default(autoincrement())
  comm_name String @unique @db.VarChar(60)
  sci_name String @unique @db.VarChar(60)
  family Family @relation(fields: [family_id], references: [id])
  family_id Int @db.SmallInt
  rarity Rarity 
  desc String @db.VarChar(255)
  img_attr String? @db.VarChar(255)
  favorites Favorite[]
  sightings Sighting[]
}

model Family {
  id Int @unique @db.SmallInt
  name String @db.VarChar(60)
  birds Bird[]
}

model Sighting {
  id Int @id @default(autoincrement())
  user_id String @db.Uuid
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  bird_id Int
  bird Bird @relation(fields: [bird_id], references: [id])
  location_id Int?
  location Location? @relation(fields: [location_id], references: [id])
  date DateTime @db.Date
  desc String? @db.VarChar(150)
}

model Location {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  lat Float
  lng Float
  sightings Sighting[]
}